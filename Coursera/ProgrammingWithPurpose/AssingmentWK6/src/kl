public class Hanoi {

    // move n smallest discs from one pole to another, using the temp pole
    private static void hanoi(int n, String from, String temp, String to) {
        if (n == 0) return;
        hanoi(n-1, from, to, temp);
        StdOut.println("Move disc " + n + " from " + from + " to " + to);
        hanoi(n-1, temp, from, to);
    }

    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        hanoi(n, "A", "B", "C");
    }
}

private static void hanoi(int n, int k, char source, char dest, char extra) {
        if (n == k) return;
        if (n == k + 1) {
            System.out.println("Move disc " + n + " from " + source + " to " + dest);
            return;
        }
        hanoi(n - 1, k, source, extra, dest);
        System.out.println("Move disc " + n + " from " + source + " to " + dest);
        hanoi(n - 1, k, extra, dest, source);

    }Ju


 if ( nDisks == 1 )
        cout << source << " --> " << dest << endl;
    else if ( nDisks == 2 )
    {
        cout << source << " --> " << intermed1 << endl;
        cout << source << " --> " << dest << endl;
        cout << intermed1 << " --> " << dest << endl;
    }
    else
    {
        Hanoi4(nDisks - 2, source, intermed2, dest, intermed1);
        cout << source << " --> " << intermed2 << endl;
        cout << source << " --> " << dest << endl;
        cout << intermed2 << " --> " << dest << endl;
        Hanoi4(nDisks - 2, intermed1, source, intermed2, dest);
    }


public class RevesPuzzle {

    public static void revesPuzzle(int n, char A, char B, char C, char D) {
        if (n == 1) {
            System.out.println("Move disc " + n + " from " + A + " to " + D);
            return;
        }
        int k = (int) Math.round(1.0 + n - Math.sqrt(1.0 + 2 * n));
        revesPuzzle(k, A, D, C, B);
        hanoi(n - k, A, C, D);
        revesPuzzle(k, B, A, C, D);
    }

    public static void hanoi(int n, char start, char mid, char end) {
        if (n > 0) {
            hanoi(n - 1, start, end, mid);
            System.out.println("Move disc " + n + " from " + start + " to " + end);
            hanoi(n - 1, mid, start, end);
        }
    }

    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        revesPuzzle(n, 'A', 'B', 'C', 'D');
    }
}






  if(n == 1 ) StdOut.println("Move disc " + (n) + " from " + from + " to " + to);
        else if( n == 2) {

            StdOut.println("Move disc " + (n) + " from " + from + " to " + temp1);
            StdOut.println("Move disc " + (n) + " from " + from + " to " + to);
            StdOut.println("Move disc " + (n) + " from " + temp1 + " to " + to);

        }
        else {

            hanoi4(n-2,from,temp2,to,temp1);
            StdOut.println("Move disc " + (n) + " from " + from + " to " + temp2);
            StdOut.println("Move disc " + (n) + " from " + from + " to " + to);
            StdOut.println("Move disc " + (n) + " from " + temp2 + " to " + to);
            hanoi4(n-2,temp1,from,to,temp2);
       }




        /*  public static void hanoi4(int n,String from, String temp1, String temp2,String to){

                   if (n <= 0) {
                      // StdOut.println("Move disc " + (n) + " from " + from + " to " + to);
                       return;
                   }
                   hanoi4(n-1, from, temp2,to, temp1);
                   StdOut.println("Move disc " + (n) + " from " + from + " to " + to);
                   hanoi4(n-1,temp1,temp2, from,to);

           }*/





              int k = n+1-(int)Math.sqrt(2*n+1);
                  System.out.println(n+"  "+k+"   "+(n-k));
                  if(n == 0) return;
                 if(n == 1){
                      k = 0;
                    // StdOut.println("Move disc " + (n) + " from " + A + " to " + D);
                   //return;
                  }
                  if(k == 1) {
                     // hanoi4(k,A,C,D,B);
                      //hanoi3(n,A,C,D,0);
                     // hanoi4(k,B,A,C,D);
                    // return;
                     k=0;
                  }


                   hanoi(k, "A", "B", "C", "D");
                   hanoi4(k,A,C,D,B);
                   hanoi3(n-k,A,C,D,k);
                   hanoi4(k,B,A,C,D);